/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Bakery {
  export type SpiceStruct = {
    to: string;
    amount: BigNumberish;
    startBlock: BigNumberish;
  };

  export type SpiceStructOutput = [string, BigNumber, BigNumber] & {
    to: string;
    amount: BigNumber;
    startBlock: BigNumber;
  };
}

export interface BakeryInterface extends utils.Interface {
  contractName: "Bakery";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_NUMBER_OF_BLOCK_FOR_REWARD()": FunctionFragment;
    "MAX_SPICE_PER_BLOCK()": FunctionFragment;
    "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD()": FunctionFragment;
    "REWARD_PER_BLOCK()": FunctionFragment;
    "REWARD_PER_SPICE()": FunctionFragment;
    "bake(address,uint256)": FunctionFragment;
    "baker()": FunctionFragment;
    "bakerBoost(address,uint256[],uint256)": FunctionFragment;
    "bakerBoostMultiplier(uint256)": FunctionFragment;
    "bakerReward(address)": FunctionFragment;
    "cookie()": FunctionFragment;
    "earlyaccess()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "land()": FunctionFragment;
    "ovens(address)": FunctionFragment;
    "rebake((address,uint256,uint256),bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardPerSpice(address)": FunctionFragment;
    "salts(bytes32)": FunctionFragment;
    "spiceBoost(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalReward(address,uint256)": FunctionFragment;
    "unbake()": FunctionFragment;
    "upgrade()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NUMBER_OF_BLOCK_FOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SPICE_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_SPICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bakerBoost",
    values: [string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bakerBoostMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bakerReward", values: [string]): string;
  encodeFunctionData(functionFragment: "cookie", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earlyaccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "land", values?: undefined): string;
  encodeFunctionData(functionFragment: "ovens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rebake",
    values: [Bakery.SpiceStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerSpice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "salts", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "spiceBoost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unbake", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NUMBER_OF_BLOCK_FOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SPICE_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_SPICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bakerBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bakerBoostMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cookie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyaccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "land", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ovens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerSpice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spiceBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Bakery extends BaseContract {
  contractName: "Bakery";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BakeryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_SPICE_PER_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_PER_SPICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baker(overrides?: CallOverrides): Promise<[string]>;

    bakerBoost(
      _to: string,
      _tokenBalances: BigNumberish[],
      nonZeroBalanceCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    bakerBoostMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bakerReward(
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    cookie(overrides?: CallOverrides): Promise<[string]>;

    earlyaccess(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    land(overrides?: CallOverrides): Promise<[string]>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        tokenId: BigNumber;
        startBlock: BigNumber;
        accumulatedSpiceAmount: BigNumber;
      }
    >;

    rebake(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerSpice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    salts(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    spiceBoost(_to: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalReward(
      to: string,
      blockCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_NUMBER_OF_BLOCK_FOR_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SPICE_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_PER_SPICE(overrides?: CallOverrides): Promise<BigNumber>;

  bake(
    token: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baker(overrides?: CallOverrides): Promise<string>;

  bakerBoost(
    _to: string,
    _tokenBalances: BigNumberish[],
    nonZeroBalanceCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bakerBoostMultiplier(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bakerReward(
    _to: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

  cookie(overrides?: CallOverrides): Promise<string>;

  earlyaccess(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  land(overrides?: CallOverrides): Promise<string>;

  ovens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      tokenId: BigNumber;
      startBlock: BigNumber;
      accumulatedSpiceAmount: BigNumber;
    }
  >;

  rebake(
    _spice: Bakery.SpiceStruct,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerSpice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  salts(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  spiceBoost(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalReward(
    to: string,
    blockCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unbake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SPICE_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_PER_SPICE(overrides?: CallOverrides): Promise<BigNumber>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baker(overrides?: CallOverrides): Promise<string>;

    bakerBoost(
      _to: string,
      _tokenBalances: BigNumberish[],
      nonZeroBalanceCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bakerBoostMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bakerReward(
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber[]]>;

    cookie(overrides?: CallOverrides): Promise<string>;

    earlyaccess(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    land(overrides?: CallOverrides): Promise<string>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        tokenId: BigNumber;
        startBlock: BigNumber;
        accumulatedSpiceAmount: BigNumber;
      }
    >;

    rebake(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerSpice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    salts(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    spiceBoost(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalReward(
      to: string,
      blockCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbake(overrides?: CallOverrides): Promise<void>;

    upgrade(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SPICE_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_PER_SPICE(overrides?: CallOverrides): Promise<BigNumber>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baker(overrides?: CallOverrides): Promise<BigNumber>;

    bakerBoost(
      _to: string,
      _tokenBalances: BigNumberish[],
      nonZeroBalanceCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bakerBoostMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bakerReward(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    cookie(overrides?: CallOverrides): Promise<BigNumber>;

    earlyaccess(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    land(overrides?: CallOverrides): Promise<BigNumber>;

    ovens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rebake(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerSpice(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    salts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    spiceBoost(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReward(
      to: string,
      blockCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SPICE_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_PER_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_PER_SPICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bakerBoost(
      _to: string,
      _tokenBalances: BigNumberish[],
      nonZeroBalanceCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bakerBoostMultiplier(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bakerReward(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cookie(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyaccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    land(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebake(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerSpice(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spiceBoost(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReward(
      to: string,
      blockCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
