/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Bakery {
  export type SpiceStruct = {
    undefined: string;
    undefined: BigNumberish;
    undefined: BigNumberish;
    undefined: BigNumberish;
  };

  export type SpiceStructOutput = [string, BigNumber, BigNumber, BigNumber];
}

export interface BakeryInterface extends utils.Interface {
  contractName: "Bakery";
  functions: {
    "MAX_NUMBER_OF_BLOCK_FOR_REWARD()": FunctionFragment;
    "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD()": FunctionFragment;
    "bake(address,uint256)": FunctionFragment;
    "character()": FunctionFragment;
    "earlyaccess()": FunctionFragment;
    "land()": FunctionFragment;
    "ovens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebake()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reward()": FunctionFragment;
    "rewardMultiplierBps(address,uint256)": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "salt(uint256)": FunctionFragment;
    "spice((address,uint256,uint256,uint256),bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbake()": FunctionFragment;
    "upgrade()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_NUMBER_OF_BLOCK_FOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "character", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earlyaccess",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "land", values?: undefined): string;
  encodeFunctionData(functionFragment: "ovens", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplierBps",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "spice",
    values: [Bakery.SpiceStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unbake", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_NUMBER_OF_BLOCK_FOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "character", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyaccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "land", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ovens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplierBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Bakery extends BaseContract {
  contractName: "Bakery";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BakeryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    character(overrides?: CallOverrides): Promise<[string]>;

    earlyaccess(overrides?: CallOverrides): Promise<[string]>;

    land(overrides?: CallOverrides): Promise<[string]>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        tokenId: BigNumber;
        startBlock: BigNumber;
        accumulatedSpiceAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(overrides?: CallOverrides): Promise<[string]>;

    rewardMultiplierBps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    salt(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    spice(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_NUMBER_OF_BLOCK_FOR_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bake(
    token: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  character(overrides?: CallOverrides): Promise<string>;

  earlyaccess(overrides?: CallOverrides): Promise<string>;

  land(overrides?: CallOverrides): Promise<string>;

  ovens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      tokenId: BigNumber;
      startBlock: BigNumber;
      accumulatedSpiceAmount: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  rebake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(overrides?: CallOverrides): Promise<string>;

  rewardMultiplierBps(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  salt(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  spice(
    _spice: Bakery.SpiceStruct,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    character(overrides?: CallOverrides): Promise<string>;

    earlyaccess(overrides?: CallOverrides): Promise<string>;

    land(overrides?: CallOverrides): Promise<string>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        tokenId: BigNumber;
        startBlock: BigNumber;
        accumulatedSpiceAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    rebake(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<string>;

    rewardMultiplierBps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    salt(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    spice(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbake(overrides?: CallOverrides): Promise<void>;

    upgrade(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    character(overrides?: CallOverrides): Promise<BigNumber>;

    earlyaccess(overrides?: CallOverrides): Promise<BigNumber>;

    land(overrides?: CallOverrides): Promise<BigNumber>;

    ovens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplierBps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    salt(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    spice(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_NUMBER_OF_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_WAIT_BETWEEN_BLOCK_FOR_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bake(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    character(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyaccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    land(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ovens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardMultiplierBps(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salt(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spice(
      _spice: Bakery.SpiceStruct,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
